'''
üìò M√≥dulo de Ejercicios de Programaci√≥n en Python

Autor: Suspect  
Versi√≥n: 1.0  
Lenguaje: Python 3.14.0(actual)
fecha: 24/10/2025  

Descripci√≥n:
Este m√≥dulo contiene una colecci√≥n de ejercicios cl√°sicos de programaci√≥n
utilizados en entrevistas t√©cnicas para puestos de desarrollo de software.  
Cada problema est√° documentado y estructurado para practicar la l√≥gica,
estructuras de datos y pensamiento algor√≠tmico en Python.

Incluye desaf√≠os como:
- Two Sum (suma de dos n√∫meros que igualan un objetivo)
- Palindrome Number (verificar si un n√∫mero es pal√≠ndromo)
- Roman to Integer (convertir n√∫meros romanos a enteros)
- Longest Common Prefix (encontrar el prefijo com√∫n m√°s largo)
- Valid Parentheses (verificar par√©ntesis balanceados)

üí° Ideal para:
- Prepararse para entrevistas t√©cnicas (Google, Amazon, Mercado Libre, etc.)
- Practicar algoritmos en Python
- Aprender a escribir c√≥digo limpio y eficiente

Uso:
Puedes ejecutar y modificar cada secci√≥n para resolver los problemas por tu cuenta.  
Cada bloque de c√≥digo tiene su propio espacio marcado con el comentario:
# Responde aqu√≠ abajo.

Licencia:
Libre para uso educativo y personal.
'''


'''
Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.
You may assume that each input would have exactly one solution, and you may not use the same element twice.
You can return the answer in any order.

Example 1:

Input: nums = [2,7,11,15], target = 9
Output: [0,1]
Explanation: Because nums[0] + nums[1] == 9, we return [0, 1].
'''
# Responde aqu√≠ abajo.

'''
Given an integer x, return true if x is a palindrome, and false otherwise.

Example 1:

Input: x = 121
Output: true
Explanation: 121 reads as 121 from left to right and from right to left.
'''
# Responde aqu√≠ abajo.

'''
Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M.

Symbol       Value
I             1
V             5
X             10
L             50
C             100
D             500
M             1000
For example, 2 is written as II in Roman numeral, just two ones added together. 12 is written as XII, which is simply X + II. The number 27 is written as XXVII, which is XX + V + II.

Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not IIII. Instead, the number four is written as IV. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as IX. There are six instances where subtraction is used:

I can be placed before V (5) and X (10) to make 4 and 9. 
X can be placed before L (50) and C (100) to make 40 and 90. 
C can be placed before D (500) and M (1000) to make 400 and 900.
Given a roman numeral, convert it to an integer.

Example 1:

Input: s = "III"
Output: 3
Explanation: III = 3.
'''
# Responde aqu√≠ abajo.

'''
Write a function to find the longest common prefix string amongst an array of strings.
If there is no common prefix, return an empty string "".

Example 1:

Input: strs = ["flower","flow","flight"]
Output: "fl"
'''
# Responde aqu√≠ abajo.

'''
Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.

An input string is valid if:

Open brackets must be closed by the same type of brackets.
Open brackets must be closed in the correct order.
Every close bracket has a corresponding open bracket of the same type.
 

Example 1:

Input: s = "()"

Output: true

Example 2:

Input: s = "()[]{}"

Output: true

Example 3:

Input: s = "(]"

Output: false

Example 4:

Input: s = "([])"

Output: true

Example 5:

Input: s = "([)]"

Output: false
'''
# Responde aqu√≠ abajo.
